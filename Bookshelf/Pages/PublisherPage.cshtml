@page "/publisher/{Id}"

@using Bookshelf.Model
@using Bookshelf.ViewModel
@using Bookshelf.Helpers

@inject ApiClient apiClient
@inject Microsoft.AspNetCore.Components.Services.IUriHelper uriHelper

<h1>Liste des livres publiés par @FullName </h1>

@if (booksAll == null)
{
    <p>Loading...</p>
}
else
{
    <ListBooksTable DataSource=@booksAll
                    AuthorChanged="@((e) => AuthorChangedHandler(e))"
                    PublisherChanged="@((e) => PublisherChangedHandler(e))" />
}

@functions{
    [Parameter] string Id { get; set; }
    Guid IdProxy { get { return new Guid(Id); } }

    IEnumerable<BookSummaryViewModel> booksAll = null;
    string FullName = "";

    protected override async Task OnInitAsync()
    {
        UpdatePage(IdProxy);
    }

    async void UpdatePage(Guid id)
    {
        var publisherDto = await apiClient.GetPublisher(id);
        var authorsDto = await apiClient.GetAllAuthors();
        var booksDto = await apiClient.GetAllBooksByPublisher(id);
        FullName = publisherDto.Name;
        booksAll =
            booksDto
            .Select(x =>
                new BookSummaryViewModel
                {
                    Title = x.Title,
                    Year = x.Year,
                    Publisher = publisherDto,
                    Authors =
                        x.IdAuthors
                        ?.Select(a => authorsDto.FirstOrDefault(b => b.Id == a))
                        .Where(a => a != null)
                        .ToList()
                });
    }

    void AuthorChangedHandler(Guid idAuthor)
    {
        uriHelper.NavigateTo("/author/" + idAuthor.ToString());
    }

    void PublisherChangedHandler(Guid idPublisher)
    {
        uriHelper.NavigateTo("/publisher/" + idPublisher.ToString());
        UpdatePage(idPublisher);
    }
}